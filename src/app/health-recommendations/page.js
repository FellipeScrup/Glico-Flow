'use client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { IoArrowBack } from 'react-icons/io5';
import { motion, AnimatePresence } from 'framer-motion';
import styles from './health-recommendations.module.css';

export default function HealthRecommendations() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('exercise');
  const [userData, setUserData] = useState(null);
  const [glycemiaData, setGlycemiaData] = useState({
    lastMeasurement: null,
    glycemiaGoals: null
  });
  const [recommendations, setRecommendations] = useState({
    exercise: [],
    nutrition: null
  });

  useEffect(() => {
    fetchAllData();
  }, []);

  const fetchAllData = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        router.push('/signin');
        return;
      }

      // Buscar perfil do usu√°rio
      const profileResponse = await fetch('http://localhost:5000/api/users/profile', {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!profileResponse.ok) throw new Error('Falha ao carregar perfil');
      const profile = await profileResponse.json();

      // Buscar medi√ß√µes
      const measurementsResponse = await fetch('http://localhost:5000/api/measurements', {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!measurementsResponse.ok) throw new Error('Falha ao carregar medi√ß√µes');
      const measurements = await measurementsResponse.json();

      // Buscar metas espec√≠ficas
      const goalsResponse = await fetch('http://localhost:5000/api/users/goals', {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!goalsResponse.ok) throw new Error('Falha ao carregar metas');
      const goals = await goalsResponse.json();

      setGlycemiaData({
        lastMeasurement: measurements[0]?.glycemiaValue || null,
        glycemiaGoals: goals
      });

      // Atualizar recomenda√ß√µes baseadas nos dados completos do usu√°rio
      const exerciseRecs = getExerciseRecommendations({
        ...profile, // Agora inclui o g√™nero do usu√°rio
        glycemiaGoals: goals,
        lastMeasurement: measurements[0]
      }, measurements[0]?.glycemiaValue);

      setRecommendations(prev => ({
        ...prev,
        exercise: exerciseRecs
      }));

      setUserData(profile); // Armazena todos os dados do perfil, incluindo o g√™nero

    } catch (error) {
      console.error('Erro ao carregar dados:', error);
    }
  };

  const getGlycemiaStatus = (value) => {
    if (!value || !glycemiaData.glycemiaGoals) return 'normal';
    
    const { hyperLimit, hypoLimit } = glycemiaData.glycemiaGoals;
    
    if (value >= hyperLimit) return 'high';
    if (value <= hypoLimit) return 'low';
    return 'normal';
  };

  const renderEmergencyAlert = () => {
    const status = getGlycemiaStatus(glycemiaData.lastMeasurement);
    
    if (status === 'normal') return null;

    return (
      <motion.div 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className={`${styles.emergencyAlert} ${styles[status]}`}
      >
        {status === 'high' ? (
          <>
            <div className={styles.alertHeader}>
              <span className={styles.alertIcon}>‚ö†Ô∏è</span>
              <h2>Alerta de Hiperglicemia</h2>
            </div>
            <div className={styles.alertContent}>
              <p className={styles.alertValue}>
                Sua glicemia est√° em {glycemiaData.lastMeasurement} mg/dL
              </p>
              <div className={styles.immediateActions}>
                <h4>A√ß√µes Imediatas:</h4>
                <ul>
                  <li>Verifique sua insulina conforme prescri√ß√£o m√©dica</li>
                  <li>Beba √°gua em abund√¢ncia</li>
                  <li>Evite exerc√≠cios intensos neste momento</li>
                  <li>Monitore sua glicemia a cada 2 horas</li>
                </ul>
              </div>
            </div>
          </>
        ) : (
          <>
            <div className={styles.alertHeader}>
              <span className={styles.alertIcon}>üö®</span>
              <h2>Alerta de Hipoglicemia</h2>
            </div>
            <div className={styles.alertContent}>
              <p className={styles.alertValue}>
                Sua glicemia est√° em {glycemiaData.lastMeasurement} mg/dL
              </p>
              <div className={styles.immediateActions}>
                <h4>A√ß√µes Imediatas:</h4>
                <ul>
                  <li>Consuma 15g de carboidrato de r√°pida absor√ß√£o</li>
                  <li>Aguarde 15 minutos e me√ßa novamente</li>
                  <li>Evite atividades f√≠sicas at√© normalizar</li>
                  <li>Se n√£o melhorar, procure atendimento m√©dico</li>
                </ul>
              </div>
            </div>
          </>
        )}
      </motion.div>
    );
  };

  const getExerciseRecommendations = (userData, glycemia) => {
    const status = getGlycemiaStatus(glycemia);
    const age = userData?.age || 30;
    const imc = userData ? (userData.weight / Math.pow(userData.height / 100, 2)).toFixed(1) : 25;
    const gender = userData?.gender || 'Male'; // Usa o g√™nero do perfil
    const diabetesType = userData?.diabetesType || 'type2';
    
    // Fun√ß√£o auxiliar para determinar intensidade baseada no perfil
    const getIntensityLevel = () => {
      if (age > 60) return 'Leve a Moderada';
      if (imc > 30) return 'Leve, progredindo gradualmente';
      if (diabetesType === 'type1') return 'Moderada com monitoramento frequente';
      return 'Moderada a Alta';
    };

    // Verifica contraindica√ß√µes
    if (status === 'low') {
      return [{
        title: '‚ö†Ô∏è Exerc√≠cios Contraindicados',
        description: 'N√£o realize atividades f√≠sicas neste momento',
        warning: `Glicemia atual: ${glycemia} mg/dL - Muito Baixa`,
        instructions: [
          'Interrompa qualquer atividade f√≠sica imediatamente',
          'Consuma 15g de carboidrato de r√°pida absor√ß√£o',
          'Aguarde a normaliza√ß√£o da glicemia (> 100 mg/dL)',
          'S√≥ retome ap√≥s 30 minutos da corre√ß√£o'
        ]
      }];
    }

    if (status === 'high') {
      return [{
        title: '‚ö†Ô∏è Aten√ß√£o - Glicemia Elevada',
        warning: `Glicemia atual: ${glycemia} mg/dL - Alta`,
        recommendations: [
          {
            title: 'üö∂‚Äç‚ôÇÔ∏è Caminhada Leve',
            duration: '10-15 minutos',
            intensity: 'Muito leve',
            warning: 'Apenas ap√≥s verificar cetonas e aplicar insulina se necess√°rio',
            notes: 'Mantenha-se bem hidratado'
          },
          {
            title: 'üßò‚Äç‚ôÇÔ∏è Exerc√≠cios de Relaxamento',
            duration: '5-10 minutos',
            type: 'Respira√ß√£o e alongamento leve',
            frequency: 'A cada 2 horas',
            notes: 'Ajuda a reduzir o estresse e a glicemia'
          }
        ]
      }];
    }

    // Recomenda√ß√µes personalizadas baseadas no perfil
    const baseIntensity = getIntensityLevel();
    const recommendations = [];

    // Exerc√≠cios Cardiovasculares
    const cardioRec = {
      title: 'ü´Ä Exerc√≠cios Cardiovasculares',
      description: `Atividades aer√≥bicas adaptadas ao perfil ${gender === 'Female' ? 'feminino' : 'masculino'}`,
      frequency: diabetesType === 'type1' ? '3-4x por semana' : '4-5x por semana',
      options: []
    };

    // Definir op√ß√µes baseadas no g√™nero
    if (gender === 'Female') {
      if (imc <= 25) {
        cardioRec.options.push(
          {
            type: 'üíÉ Dan√ßa',
            duration: '30-45 minutos',
            intensity: baseIntensity
          },
          {
            type: 'üö¥‚Äç‚ôÄÔ∏è Spinning',
            duration: '30-40 minutos',
            intensity: baseIntensity
          }
        );
      } else {
        cardioRec.options.push(
          {
            type: 'üèä‚Äç‚ôÄÔ∏è Hidrogin√°stica',
            duration: '45 minutos',
            intensity: 'Leve a Moderada'
          },
          {
            type: 'üö∂‚Äç‚ôÄÔ∏è Caminhada',
            duration: '30 minutos',
            intensity: 'Leve, aumentando gradualmente'
          }
        );
      }
    } else {
      if (imc <= 25) {
        cardioRec.options.push(
          {
            type: 'üèÉ‚Äç‚ôÇÔ∏è Corrida',
            duration: '30-45 minutos',
            intensity: baseIntensity
          },
          {
            type: 'üö¥‚Äç‚ôÇÔ∏è Ciclismo',
            duration: '45-60 minutos',
            intensity: baseIntensity
          }
        );
      } else {
        cardioRec.options.push(
          {
            type: 'üö∂‚Äç‚ôÇÔ∏è Caminhada',
            duration: '45 minutos',
            intensity: 'Leve, aumentando gradualmente'
          },
          {
            type: 'üèä‚Äç‚ôÇÔ∏è Nata√ß√£o',
            duration: '30 minutos',
            intensity: 'Leve a Moderada'
          }
        );
      }
    }

    recommendations.push(cardioRec);

    // Treino de For√ßa espec√≠fico por g√™nero
    const strengthRec = {
      title: 'üí™ Treino de For√ßa',
      description: `Fortalecimento muscular adaptado ao perfil ${gender === 'Female' ? 'feminino' : 'masculino'}`,
      frequency: gender === 'Female' ? '3-4x por semana' : '4-5x por semana'
    };

    if (gender === 'Female') {
      strengthRec.exercises = [
        {
          type: 'Muscula√ß√£o com pesos',
          sets: '3-4 s√©ries',
          reps: '8-12 repeti√ß√µes',
          intensity: 'Leve, progredindo gradualmente',
          rest: '60-90 segundos entre s√©ries',
          focus: [
            'Fortalecimento de membros inferiores',
            'Exerc√≠cios para core e postura',
            'Fortalecimento do assoalho p√©lvico'
          ],
          exercises: [
            'Agachamento',
            'Leg Press',
            'Cadeira Extensora',
            'Cadeira Flexora',
            'Eleva√ß√£o P√©lvica',
            'Abdominais',
            'Exerc√≠cios para costas'
          ]
        }
      ];
    } else {
      strengthRec.exercises = [
        {
          type: 'Muscula√ß√£o com pesos',
          sets: '3-4 s√©ries',
          reps: age > 50 ? '12-15 repeti√ß√µes' : '8-12 repeti√ß√µes',
          intensity: baseIntensity,
          rest: '90-120 segundos entre s√©ries',
          focus: [
            'Desenvolvimento de for√ßa muscular',
            'Hipertrofia muscular',
            'Fortalecimento do core',
            'Estabilidade articular'
          ],
          exercises: [
            {
              name: 'Treino A - Superior',
              exercises: [
                'Supino reto com barra',
                'Puxada frontal',
                'Desenvolvimento de ombros',
                'Remada curvada',
                'Extens√£o triceps na polia',
                'Rosca direta com barra'
              ]
            },
            {
              name: 'Treino B - Inferior',
              exercises: [
                'Agachamento livre',
                'Leg press 45¬∞',
                'Cadeira extensora',
                'Mesa flexora',
                'Panturrilha em p√©',
                'Abdominais'
              ]
            }
          ],
          notes: [
            'Alternar entre treino A e B',
            'Aumentar carga progressivamente',
            'Manter forma correta dos exerc√≠cios',
            'Hidrata√ß√£o constante durante treino'
          ]
        }
      ];
    }

    recommendations.push(strengthRec);

    // Flexibilidade e Equil√≠brio espec√≠fico por g√™nero
    const flexibilityRec = {
      title: gender === 'Female' ? 'üßò‚Äç‚ôÄÔ∏è Flexibilidade e Bem-estar' : 'üßò‚Äç‚ôÇÔ∏è Flexibilidade e Equil√≠brio',
      description: gender === 'Female' ? 
        'Exerc√≠cios complementares focados no p√∫blico feminino' : 
        'Exerc√≠cios complementares focados no p√∫blico masculino',
      frequency: '2-3x por semana'
    };

    if (gender === 'Female') {
      flexibilityRec.activities = [
        {
          type: 'Yoga Flow',
          duration: '30-45 minutos',
          benefits: [
            'Melhora da flexibilidade',
            'Redu√ß√£o do estresse',
            'Fortalecimento do core',
            'Equil√≠brio hormonal'
          ]
        },
        {
          type: 'Pilates',
          duration: '45-60 minutos',
          benefits: [
            'Fortalecimento do core',
            'Melhora da postura',
            'Controle respirat√≥rio'
          ]
        },
        {
          type: 'Alongamentos',
          duration: '10-15 minutos',
          timing: 'Ap√≥s exerc√≠cios principais',
          focus: [
            'Membros inferiores',
            'Regi√£o lombar',
            'Ombros e pesco√ßo'
          ]
        }
      ];
    } else {
      flexibilityRec.activities = [
        {
          type: 'Yoga para Atletas',
          duration: '30-40 minutos',
          benefits: [
            'Melhora da flexibilidade muscular',
            'Preven√ß√£o de les√µes',
            'Recupera√ß√£o muscular',
            'Equil√≠brio corporal'
          ],
          recommended: [
            'Power Yoga',
            'Yoga para Esportistas',
            'Posturas de for√ßa e equil√≠brio'
          ]
        },
        {
          type: 'Alongamento Din√¢mico',
          duration: '15-20 minutos',
          timing: 'Antes dos exerc√≠cios principais',
          focus: [
            'Mobilidade articular',
            'Prepara√ß√£o muscular',
            'Aquecimento progressivo'
          ]
        },
        {
          type: 'Alongamento Est√°tico',
          duration: '10-15 minutos',
          timing: 'Ap√≥s exerc√≠cios principais',
          focus: [
            'Grandes grupos musculares',
            'Redu√ß√£o da tens√£o muscular',
            'Melhora da recupera√ß√£o'
          ],
          areas: [
            'Peitoral e ombros',
            'Costas',
            'Quadr√≠ceps e posteriores',
            'Core'
          ]
        }
      ];

      // Adiciona recomenda√ß√µes espec√≠ficas para mobilidade
      flexibilityRec.mobilityWork = {
        type: 'Trabalho de Mobilidade',
        frequency: '2x por semana',
        duration: '15-20 minutos',
        exercises: [
          'Mobilidade de quadril',
          'Mobilidade escapular',
          'Mobilidade de tornozelo',
          'Exerc√≠cios com foam roller'
        ],
        benefits: [
          'Melhora da amplitude de movimento',
          'Preven√ß√£o de les√µes',
          'Otimiza√ß√£o do desempenho nos exerc√≠cios'
        ]
      };
    }

    recommendations.push(flexibilityRec);

    if (gender === 'Male') {
      recommendations.push({
        title: 'üîÑ Recupera√ß√£o e Regenera√ß√£o',
        description: 'Estrat√©gias para otimizar a recupera√ß√£o muscular',
        frequency: 'Conforme necess√°rio',
        activities: [
          {
            type: 'Descanso Ativo',
            duration: '20-30 minutos',
            options: [
              'Caminhada leve',
              'Nata√ß√£o recreativa',
              'Ciclismo leve'
            ]
          },
          {
            type: 'T√©cnicas de Recupera√ß√£o',
            duration: '15-20 minutos',
            techniques: [
              'Contraste t√©rmico (√°gua quente/fria)',
              'Auto-massagem com foam roller',
              'Alongamentos suaves',
              'Compress√£o muscular',
              'Medita√ß√£o e t√©cnicas respirat√≥rias'
            ],
            recommendations: [
              'Aplique gelo em √°reas inflamadas por 15-20 minutos',
              'Use o foam roller por 30-60 segundos em cada grupo muscular',
              'Fa√ßa sess√µes de contraste: 2 min quente / 30s frio',
              'Pratique t√©cnicas de respira√ß√£o profunda'
            ],
            notes: [
              'Realize ap√≥s treinos intensos',
              'Adapte as t√©cnicas conforme sua resposta',
              'Mantenha boa hidrata√ß√£o durante o processo',
              'Monitore sinais de desconforto excessivo'
            ]
          }
        ],
        generalTips: [
          'Mantenha uma boa hidrata√ß√£o',
          'Garanta 7-8 horas de sono por noite',
          'Mantenha uma alimenta√ß√£o balanceada',
          'Monitore seus n√≠veis de energia'
        ]
      });
    }
    if (gender === 'Female') {
      recommendations.push({
        title: 'üîÑ Recupera√ß√£o e Regenera√ß√£o',
        description: 'Estrat√©gias para otimizar a recupera√ß√£o muscular feminina',
        frequency: 'Conforme necess√°rio',
        activities: [
          {
            type: 'Descanso Ativo',
            duration: '20-30 minutos',
            techniques: [
              'Caminhada leve ao ar livre',
              'Yoga restaurativa',
              'Hidrogin√°stica leve',
              'Alongamentos suaves'
            ],
            recommendations: [
              'Escolha atividades de baixo impacto',
              'Mantenha-se hidratada durante as atividades',
              'Pratique em ambiente relaxante',
              'Respeite os sinais do seu corpo'
            ]
          },
          {
            type: 'T√©cnicas de Recupera√ß√£o',
            duration: '15-20 minutos',
            techniques: [
              'Contraste t√©rmico suave (√°gua morna/fria)',
              'Automassagem com foam roller',
              'T√©cnicas de respira√ß√£o profunda',
              'Medita√ß√£o guiada',
              'Libera√ß√£o miofascial',
              'Exerc√≠cios de mobilidade p√©lvica'
            ],
            recommendations: [
              'Aplique compressa morna em √°reas tensas por 10-15 minutos',
              'Use o foam roller com press√£o moderada',
              'Fa√ßa sess√µes de contraste: 2 min morno / 30s frio',
              'Pratique respira√ß√£o diafragm√°tica',
              'D√™ aten√ß√£o especial √† regi√£o lombar e quadril'
            ],
            notes: [
              'Ajuste as t√©cnicas durante o ciclo menstrual',
              'Evite press√£o excessiva em per√≠odos sens√≠veis',
              'Mantenha consist√™ncia nas pr√°ticas de recupera√ß√£o',
              'Observe padr√µes de tens√£o corporal'
            ]
          },
          {
            type: 'Relaxamento e Bem-estar',
            duration: '20-30 minutos',
            techniques: [
              'Banho de imers√£o com sais',
              'Aromaterapia relaxante',
              'Alongamentos suaves',
              'T√©cnicas de mindfulness',
              'Exerc√≠cios de respira√ß√£o calmante'
            ],
            recommendations: [
              'Crie um ambiente tranquilo e acolhedor',
              'Use √≥leos essenciais relaxantes (lavanda, camomila)',
              'Mantenha temperatura agrad√°vel durante as pr√°ticas',
              'Combine com m√∫sica suave se desejar'
            ],
            benefits: [
              'Redu√ß√£o do estresse',
              'Melhora da qualidade do sono',
              'Equil√≠brio hormonal',
              'Recupera√ß√£o muscular otimizada',
              'Bem-estar emocional'
            ]
          }
        ],
        generalTips: [
          'Mantenha uma rotina regular de sono (7-8 horas)',
          'Hidrate-se adequadamente ao longo do dia',
          'Observe sinais de fadiga excessiva',
          'Adapte a intensidade conforme seu ciclo hormonal',
          'Priorize alimenta√ß√£o balanceada e nutritiva',
          'Inclua per√≠odos de descanso entre treinos intensos'
        ],
        hormonalConsiderations: {
          title: 'Considera√ß√µes Hormonais',
          recommendations: [
            'Ajuste a intensidade das t√©cnicas de recupera√ß√£o conforme a fase do ciclo',
            'Aumente o foco em relaxamento durante a fase pr√©-menstrual',
            'Priorize t√©cnicas suaves durante o per√≠odo menstrual',
            'Observe padr√µes de reten√ß√£o de l√≠quidos e adapte as pr√°ticas'
          ]
        },
        specialFocus: {
          title: '√Åreas de Aten√ß√£o Especial',
          areas: [
            {
              region: 'Regi√£o P√©lvica',
              techniques: [
                'Exerc√≠cios de mobilidade suave',
                'Alongamentos espec√≠ficos',
                'Relaxamento do assoalho p√©lvico'
              ]
            },
            {
              region: 'Membros Inferiores',
              techniques: [
                'Drenagem linf√°tica natural',
                'Eleva√ß√£o das pernas',
                'Massagem suave'
              ]
            },
            {
              region: 'Regi√£o Lombar',
              techniques: [
                'Alongamentos espec√≠ficos',
                'Libera√ß√£o miofascial suave',
                'Exerc√≠cios de estabiliza√ß√£o'
              ]
            }
          ]
        }
      });
    }

    return recommendations;
  };

  const getNutritionalRecommendations = (userData, glycemia) => {
    const status = getGlycemiaStatus(glycemia);
    const weight = userData?.weight || 70;
    const imc = userData ? (userData.weight / Math.pow(userData.height / 100, 2)).toFixed(1) : 25;

    if (status === 'low') {
      return [{
        title: 'üçØ Corre√ß√£o Imediata',
        portions: [
          `${Math.round(weight * 0.2)}g de carboidrato r√°pido`,
          '200ml de suco natural ou refrigerante comum',
          `${Math.round(weight * 0.3)}g de a√ß√∫car ou mel`
        ],
        timing: 'Agora',
        notes: 'Me√ßa novamente em 15 minutos'
      },
      {
        title: 'ü•™ Ap√≥s Normaliza√ß√£o',
        portions: [
          '1 sandu√≠che integral com prote√≠na',
          '1 fruta m√©dia',
          '1 copo de leite ou iogurte'
        ],
        timing: 'Ap√≥s glicemia > 100mg/dL',
        notes: 'Previne nova queda'
      }];
    }

    if (status === 'high') {
      return [{
        title: 'ü•ó Refei√ß√£o Corretiva',
        portions: [
          'Prote√≠nas magras (100-150g)',
          'Vegetais n√£o-amil√°ceos √† vontade',
          'Evite totalmente carboidratos'
        ],
        timing: 'Pr√≥xima refei√ß√£o',
        notes: 'Beba muita √°gua'
      },
      {
        title: '‚è∞ Pr√≥ximas 4 horas',
        portions: [
          'Apenas prote√≠nas e gorduras boas',
          'Vegetais folhosos √† vontade',
          '√Ågua ou ch√°s sem a√ß√∫car'
        ],
        timing: 'At√© normalizar',
        notes: 'Monitore a cada 2 horas'
      }];
    }

    // Recomenda√ß√µes normais baseadas no perfil
    const carbsPerKg = imc > 25 ? 2 : 3;
    const proteinPerKg = imc > 25 ? 2 : 1.5;

    return [
      {
        title: 'üç≥ Caf√© da Manh√£',
        portions: [
          `${Math.round(weight * carbsPerKg * 0.2)}g de carboidratos complexos`,
          `${Math.round(weight * proteinPerKg * 0.25)}g de prote√≠na`,
          'Gorduras boas (1 colher de azeite ou 1/4 abacate)'
        ],
        timing: '7h - 8h',
        notes: 'Inclua fibras e prote√≠nas'
      },
      {
        title: 'ü•ó Almo√ßo',
        portions: [
          `${Math.round(weight * carbsPerKg * 0.3)}g de carboidratos`,
          `${Math.round(weight * proteinPerKg * 0.3)}g de prote√≠na`,
          'Vegetais √† vontade',
          '1 colher de azeite'
        ],
        timing: '12h - 13h',
        notes: 'Priorize vegetais coloridos'
      },
      {
        title: '‚òï Caf√© da Tarde',
        portions: [
          `${Math.round(weight * carbsPerKg * 0.15)}g de carboidratos`,
          `${Math.round(weight * proteinPerKg * 0.15)}g de prote√≠na`,
          '1 fruta m√©dia ou 1 fatia de p√£o integral',
          '1 por√ß√£o de prote√≠na magra (queijo branco, peito de peru)'
        ],
        timing: '15h - 16h',
        notes: 'Combine sempre carboidrato com prote√≠na para maior saciedade'
      },
      {
        title: 'üçΩÔ∏è Jantar',
        portions: [
          `${Math.round(weight * carbsPerKg * 0.25)}g de carboidratos`,
          `${Math.round(weight * proteinPerKg * 0.3)}g de prote√≠na`,
          'Vegetais √† vontade',
          '1 colher de azeite'
        ],
        timing: '19h - 20h',
        notes: 'Evite carboidratos simples √† noite. Prefira refei√ß√£o mais leve que o almo√ßo'
      }
    ];
  };

  const getMealSuggestions = (userData, glycemia) => {
    const status = getGlycemiaStatus(glycemia);
    const imc = userData ? (userData.weight / Math.pow(userData.height / 100, 2)).toFixed(1) : 25;
    const isOverweight = imc > 25;
    const diabetesType = userData?.diabetesType || 'type2';
    
    // Op√ß√µes de caf√© da manh√£
    const breakfastOptions = [
      {
        title: "Omelete de Claras com Vegetais",
        link: "https://www.diabetes.org/healthy-living/recipes-nutrition/recipes/vegetable-omelet",
        calories: 250,
        carbs: 15,
        protein: 20,
        recommended: diabetesType === 'type1' || isOverweight,
        ingredients: [
          "3 claras de ovo",
          "Espinafre",
          "Cogumelos",
          "1 fatia de p√£o integral"
        ]
      },
      {
        title: "Overnight Oats com Frutas Vermelhas",
        link: "https://www.diabetesstrong.com/diabetic-overnight-oats/",
        calories: 300,
        carbs: 35,
        protein: 15,
        recommended: !isOverweight && status !== 'high',
        ingredients: [
          "40g de aveia",
          "200ml de leite desnatado",
          "Mix de frutas vermelhas",
          "Canela"
        ]
      },
      {
        title: "Panqueca Proteica de Banana",
        link: "https://www.diabetes.co.uk/recipes/protein-pancakes.html",
        calories: 280,
        carbs: 30,
        protein: 18,
        recommended: userData?.age < 50 && !isOverweight,
        ingredients: [
          "1 banana pequena",
          "2 ovos",
          "30g de whey protein",
          "Canela"
        ]
      }
    ];

    // Op√ß√µes de almo√ßo
    const lunchOptions = [
      {
        title: "Bowl de Quinoa com Frango",
        link: "https://www.diabetesstrong.com/quinoa-chicken-bowl/",
        calories: 400,
        carbs: 45,
        protein: 35,
        recommended: !isOverweight,
        ingredients: [
          "100g de frango grelhado",
          "50g de quinoa cozida",
          "Mix de vegetais assados",
          "Azeite de oliva"
        ]
      },
      {
        title: "Salm√£o com Legumes no Vapor",
        link: "https://www.diabetes.org/healthy-living/recipes-nutrition/recipes/salmon-vegetables",
        calories: 350,
        carbs: 20,
        protein: 30,
        recommended: status === 'high' || isOverweight,
        ingredients: [
          "150g de salm√£o",
          "Br√≥colis",
          "Cenoura",
          "Abobrinha"
        ]
      },
      {
        title: "Wrap de Peru com Homus",
        link: "https://www.diabetesstrong.com/low-carb-turkey-hummus-wrap/",
        calories: 380,
        carbs: 35,
        protein: 28,
        recommended: userData?.age < 40 && !isOverweight,
        ingredients: [
          "Tortilha integral",
          "100g de peru",
          "Homus",
          "Vegetais frescos"
        ]
      }
    ];

    // Op√ß√µes de jantar
    const dinnerOptions = [
      {
        title: "Peixe Assado com Pur√™ de Couve-Flor",
        link: "https://www.diabetes.org/healthy-living/recipes-nutrition/recipes/roasted-fish",
        calories: 300,
        carbs: 15,
        protein: 32,
        recommended: true, // Boa para todos
        ingredients: [
          "150g de peixe branco",
          "Couve-flor",
          "Alho",
          "Azeite de oliva"
        ]
      },
      {
        title: "Stir-Fry de Tofu e Vegetais",
        link: "https://www.diabetesstrong.com/tofu-stir-fry/",
        calories: 320,
        carbs: 25,
        protein: 20,
        recommended: isOverweight || status === 'high',
        ingredients: [
          "100g de tofu firme",
          "Mix de vegetais",
          "Molho shoyu light",
          "Gengibre"
        ]
      },
      {
        title: "Omelete de Forno com Ricota",
        link: "https://www.diabetes.co.uk/recipes/baked-omelette.html",
        calories: 280,
        carbs: 8,
        protein: 25,
        recommended: status === 'high' || isOverweight,
        ingredients: [
          "3 ovos",
          "50g de ricota",
          "Espinafre",
          "Tomate cereja"
        ]
      }
    ];

    return {
      breakfast: breakfastOptions.filter(option => option.recommended),
      lunch: lunchOptions.filter(option => option.recommended),
      dinner: dinnerOptions.filter(option => option.recommended)
    };
  };

  const renderContent = () => {
    if (activeTab === 'exercise') {
      return (
        <div className={styles.recommendationsContainer}>
          {recommendations.exercise.map((rec, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className={styles.exerciseCard}
            >
              <h3>{rec.title}</h3>
              <p>{rec.description}</p>
              <p><strong>Frequ√™ncia:</strong> {rec.frequency}</p>

              {rec.warning && (
                <div className={styles.warningBox}>
                  <p>{rec.warning}</p>
                </div>
              )}

              {/* Op√ß√µes de exerc√≠cios */}
              {rec.options && (
                <div className={styles.exerciseOptions}>
                  {rec.options.map((option, i) => (
                    <div key={i} className={styles.exerciseOption}>
                      <h4>{option.type}</h4>
                      <p>Dura√ß√£o: {option.duration}</p>
                      <p>Intensidade: {option.intensity}</p>
                      
                      {option.techniques && (
                        <div className={styles.techniquesList}>
                          <h4>T√©cnicas:</h4>
                          <ul>
                            {option.techniques.map((technique, idx) => (
                              <li key={idx}>{technique}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {option.recommendations && (
                        <div className={styles.recommendationsList}>
                          <h4>Recomenda√ß√µes:</h4>
                          <ul>
                            {option.recommendations.map((rec, idx) => (
                              <li key={idx}>{rec}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}

              {/* Detalhes dos exerc√≠cios */}
              {rec.exercises && (
                <div className={styles.exerciseDetails}>
                  {rec.exercises.map((ex, i) => (
                    <div key={i} className={styles.exerciseDetail}>
                      <h4>{ex.type}</h4>
                      <p>S√©ries: {ex.sets}</p>
                      <p>Repeti√ß√µes: {ex.reps}</p>
                      <p>Intensidade: {ex.intensity}</p>
                      <p>Descanso: {ex.rest}</p>
                      
                      {ex.techniques && (
                        <div className={styles.techniquesList}>
                          <h4>T√©cnicas:</h4>
                          <ul>
                            {ex.techniques.map((technique, idx) => (
                              <li key={idx}>{technique}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {ex.recommendations && (
                        <div className={styles.recommendationsList}>
                          <h4>Recomenda√ß√µes:</h4>
                          <ul>
                            {ex.recommendations.map((rec, idx) => (
                              <li key={idx}>{rec}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}

              {/* Atividades */}
              {rec.activities && (
                <div className={styles.activities}>
                  {rec.activities.map((activity, i) => (
                    <div key={i} className={styles.activity}>
                      <h4>{activity.type}</h4>
                      <p>Dura√ß√£o: {activity.duration}</p>
                      {activity.timing && <p>Momento: {activity.timing}</p>}
                      
                      {activity.techniques && (
                        <div className={styles.techniquesList}>
                          <h4>T√©cnicas:</h4>
                          <ul>
                            {activity.techniques.map((technique, idx) => (
                              <li key={idx}>{technique}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {activity.recommendations && (
                        <div className={styles.recommendationsList}>
                          <h4>Recomenda√ß√µes:</h4>
                          <ul>
                            {activity.recommendations.map((rec, idx) => (
                              <li key={idx}>{rec}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </motion.div>
          ))}
        </div>
      );
    }
    if (activeTab === 'nutrition') {
        const meals = [
            {
                id: 'breakfast',
                title: 'Caf√© da Manh√£',
                icon: 'üç≥',
                portions: [
                    '49g de carboidratos complexos',
                    '62g de prote√≠na',
                    'Gorduras boas (1 colher de azeite ou 1/4 abacate)'
                ],
                timing: '7h - 8h',
                notes: 'Inclua fibras e prote√≠nas',
                suggestions: [
                    {
                        title: "Panqueca de Banana com Aveia",
                        ingredients: [
                            "1 banana madura",
                            "2 ovos",
                            "3 colheres de sopa de aveia",
                            "Canela a gosto"
                        ],
                        link: "https://www.receiteria.com.br/receita/panqueca-de-banana-fit/"
                    },
                    {
                        title: "Smoothie Verde Detox",
                        ingredients: [
                            "1 folha de couve",
                            "1 banana",
                            "1 punhado de espinafre",
                            "1/2 pepino",
                            "200 ml de √°gua de coco",
                            "Gelo"
                        ],
                        link: "https://receitinhasleves.com.br/smoothie-verde-detox/"
                    },
                    {
                        title: "Crepioca Proteica",
                        ingredients: [
                            "1 ovo",
                            "1 colher de sopa de goma de tapioca",
                            "1 colher de requeij√£o light",
                            "Queijo cottage"
                        ],
                        link: "https://www.tudogostoso.com.br/receita/183595-crepioca-fit.html"
                    }
                ]
            },
            {
                id: 'lunch',
                title: 'Almo√ßo',
                icon: 'üçΩÔ∏è',
                portions: [
                    '74g de carboidratos',
                    '74g de prote√≠na',
                    'Vegetais √† vontade',
                    '1 colher de azeite'
                ],
                timing: '12h - 13h',
                notes: 'Priorize vegetais coloridos',
                suggestions: [
                    {
                        title: "Risoto de Quinoa com Frango",
                          ingredients: [
                            "5 coxas de frango",
                            "1 cebola em cubos",
                            "¬Ω cenoura em cubos",
                            "2 talos de aipo fatiados",
                            "¬º de pimenta dedo-de-mo√ßa fatiado",
                            "Tomilho, louro, alecrim",
                            "2 colheres de a√ßafr√£o da terra (c√∫rcuma)",
                            "1 colher de extrato de tomate",
                            "2 litros de √°gua fervente",
                            "1 colher de alho picado",
                            "1 colher de gengibre ralado",
                            "Sal, pimenta e noz moscada a gosto"


                        ],
                        link: "https://receitas.globo.com/receitas-da-tv/que-marravilha/risoto-de-frango-quinoa-gorgonzola-e-brocolis-gnt.ghtml"
                    },
                    {
                        title: "Hamb√∫rguer Caseiro com Salada",
                        ingredients: [
                            "400 g de carne mo√≠da",
                            "4 colheres (sopa) de Farelo de Aveia Org√¢nica",
                            "1 e meia colher (ch√°) de sal",
                            "meia cebola pequena ralada",
                            "1 x√≠cara (ch√°) de abobrinha ralada no ralo fino"

                        ],
                        link: "https://www.receitasnestle.com.br/receitas/hamburguer-tradicional-saudavel"
                    },
                    {
                        title: "Legumes Assados com Peixe",
                        ingredients: [
                            "150 gramas de fil√© de peixe (optamos por til√°pia)",
                            "Sal e pimenta a gosto",
                            "Suco de 1/2 lim√£o",
                            "1 cebola em rodelas",
                            "1 piment√£o",
                            "1 abobrinha pequena cortada em rodelas",
                            "1 tomate",
                            "Salsa e coentro a gosto"
                        ],
                        link: "https://www.receiteria.com.br/receita/peixe-assado-com-legumes/"
                    }
                ]
            },
            {
                id: 'afternoon',
                title: 'Caf√© da Tarde',
                icon: '‚òï',
                portions: [
                    '37g de carboidratos',
                    '37g de prote√≠na',
                    '1 fruta m√©dia ou 1 fatia de p√£o integral',
                    '1 por√ß√£o de prote√≠na magra'
                ],
                timing: '15h - 16h',
                notes: 'Combine sempre carboidrato com prote√≠na para maior saciedade',
                suggestions: [
                    {
                        title: "Tapioca com Frango e Ricota",
                        ingredients: [
                            "500 g de massa de tapioca",
                            "200 g de creme de ricota fresca",
                            "10 g de chia",
                            "1 pote pequeno de tomate seco",
                            "300 g de frango desfiado"
                        ],
                        link: "https://receitas.globo.com/ana-maria-braga/salgados/tapioca-de-creme-de-ricota-chia-e-frango-desfiado.ghtml"
                    },
                    {
                        title: "Bolinho de Aveia com Banana ‚Äì sem a√ß√∫car",
                        ingredients: [
                            "3 bananas grandes ou 4 m√©dias",
                            "2 ovos",
                            "1 colher (ch√°) de canela em p√≥",
                            "1/2 x√≠cara de uva passa",
                            "1 x√≠cara ‚Äì 115g ‚Äì aveia flocos finos",
                            "1 colher (sp) fermento em p√≥"
                        ],
                        link: "https://blog.supernosso.com/pt-br/3-receitas-de-bolinho-de-banana-e-aveia-facil-e-delicioso/"
                    },
                    {
                        title: "Sandu√≠che Integral com Ovo",
                        ingredients: [
                            "4 folhas de escarola picadas",
                            "1 sach√™ de Tempero SAZ√ìN¬Æ para Pipoca sabor Cebola e Salsa",
                            "meia x√≠cara (ch√°) de mu√ßarela ralada",
                            "8 fatias de p√£o de forma integral",
                            "4 ovos",
                            "1 pitada de sal"
                        ],
                        link: "https://www.saboresajinomoto.com.br/receita/sanduiche-integral-com-ovo"
                    }
                ]
            },
            {
                id: 'dinner',
                title: 'Jantar',
                icon: 'üåô',
                portions: [
                    '62g de carboidratos',
                    '74g de prote√≠na',
                    'Vegetais √† vontade',
                    '1 colher de azeite'
                ],
                timing: '19h - 20h',
                notes: 'Evite carboidratos simples √† noite. Prefira refei√ß√£o mais leve que o almo√ßo',
                suggestions: [
                    {
                        title: "Caldo Verde Fit",
                        ingredients: [
                            "1 colher (sopa) de gordura da sua prefer√™ncia (√≥leo de coco, manteiga ghee, banha)",
                            "350 gr de lingui√ßa paio, cortada em cubos m√©dios",
                            "1 cebola grande, em cubos m√©dios",
                            "3 dentes de alho, picados finamente",
                            "1 talo de sals√£o, picado (opcional)",
                            "1 kg de chuchu, descascado e picado grosseiramente",
                            "1 litro de caldo de legumes (ou √°gua)",
                            "200 gr de couve, picada finamente",
                            "sal, pimenta e noz moscada a gosto"
                        ],
                        link: "https://www.temperando.com/caldo-verde-low-carb/"
                    },
                    {
                        title: "Legumes Recheados com Carne",
                        ingredients: [
                            "Abobrinha",
                            "Berinjela",
                            "150g de carne mo√≠da",
                            "Queijo ralado light"
                        ],
                        link: "https://guiadacozinha.com.br/receitas/legumes-recheados-delicias-que-valem-por-uma-refeicao/"
                    },
                    {
                        title: "Frango ao Molho Mostarda",
                        ingredients: [
                            "500 a 600gr de peito de frango",
                            "4 dentes de alho",
                            "1 colher de ch√° de sal",
                            "pimenta do reino a gosto",
                            "3 fios de √≥leo",
                            "3 colheres de margarina ou manteiga ao todo",
                            "2 colheres de sopa de farinha de trigo (sem fermento)",
                            "meio litro de leite (500ml)",
                            "pimenta do reino a gosto",
                            "sal a gosto",
                            "3 colheres de sopa de mostarda",
                            "cebolinha a gosto"
                        ],
                        link: "https://blog.supernosso.com/pt-br/peito-de-frango-ao-molho-de-mostarda-economico-de-uma-panela-so-faca-no-dia-a-dia-receitasda-cris/"
                    }
                ]
            }
        ];
      return (
        <div className={styles.nutritionGrid}>
          {meals.map((meal) => (
            <MealCard key={meal.id} {...meal} />
          ))}
        </div>
      );
    }
  };

  const renderMealSuggestions = (mealTime) => {
    const suggestions = getMealSuggestions(userData, glycemiaData.lastMeasurement)[mealTime];
    
    return (
      <div className={styles.mealSuggestions}>
        <h4>Sugest√µes de Pratos:</h4>
        <div className={styles.suggestionCards}>
          {suggestions.map((meal, index) => (
            <motion.div 
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className={styles.suggestionCard}
            >
              <h5>{meal.title}</h5>
              <div className={styles.macros}>
                <span>üî• {meal.calories} kcal</span>
                <span>üçö {meal.carbs}g carbs</span>
                <span>ü•© {meal.protein}g prot</span>
              </div>
              <div className={styles.ingredients}>
                <h6>Ingredientes:</h6>
                <ul>
                  {meal.ingredients.map((ing, i) => (
                    <li key={i}>{ing}</li>
                  ))}
                </ul>
              </div>
              <a 
                href={meal.link} 
                target="_blank" 
                rel="noopener noreferrer"
                className={styles.recipeLink}
              >
                Ver Receita Completa ‚Üí
              </a>
            </motion.div>
          ))}
        </div>
      </div>
    );
  };

  const MealCard = ({ title, icon, portions, timing, notes, suggestions }) => {
    const [openSuggestionId, setOpenSuggestionId] = useState(null);

    return (
      <div className={styles.mealCard}>
        <div className={styles.mealHeader}>
          <span className={styles.mealIcon}>{icon}</span>
          <h3>{title}</h3>
        </div>
        
        <div className={styles.mealContent}>
          <p><strong>Por√ß√µes:</strong></p>
          {portions.map((portion, index) => (
            <p key={index}>{portion}</p>
          ))}
          <p><strong>Hor√°rio:</strong> {timing}</p>
          {notes && <p className={styles.notes}><strong>Obs:</strong> {notes}</p>}
        </div>

        <div className={styles.suggestionsList}>
          {suggestions.map((suggestion, index) => (
            <div key={index} className={styles.suggestionItem}>
              <button 
                className={styles.suggestionsButton}
                onClick={() => setOpenSuggestionId(openSuggestionId === index ? null : index)}
              >
                {openSuggestionId === index ? 'Ocultar Sugest√£o' : suggestion.title} üçΩÔ∏è
              </button>

              <AnimatePresence>
                {openSuggestionId === index && (
                  <motion.div 
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.3 }}
                    className={styles.suggestionContent}
                  >
                    <h4>{suggestion.title}</h4>
                    <div className={styles.ingredients}>
                      <p><strong>Ingredientes:</strong></p>
                      <ul>
                        {suggestion.ingredients.map((ing, i) => (
                          <li key={i}>{ing}</li>
                        ))}
                      </ul>
                    </div>
                    <a 
                      href={suggestion.link} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className={styles.recipeLink}
                    >
                      Ver Receita Completa ‚Üí
                    </a>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          ))}
        </div>
      </div>
    );
  };

  const renderRecoveryTechniques = (recovery) => {
    return (
      <div className={styles.recoveryCard}>
        {recovery.activities.map((activity, index) => (
          <div key={index} className={styles.techniqueSection}>
            <h3>{activity.type}</h3>
            
            {activity.duration && (
              <p className={styles.duration}>Dura√ß√£o: {activity.duration}</p>
            )}

            {activity.options && (
              <div className={styles.optionsList}>
                <h4>Op√ß√µes:</h4>
                <ul>
                  {activity.options.map((option, idx) => (
                    <li key={idx}>{option}</li>
                  ))}
                </ul>
              </div>
            )}

            {activity.techniques && (
              <div className={styles.techniquesList}>
                <h4>T√©cnicas:</h4>
                <ul>
                  {activity.techniques.map((technique, idx) => (
                    <li key={idx}>{technique}</li>
                  ))}
                </ul>
              </div>
            )}

            {activity.recommendations && (
              <div className={styles.recommendationsList}>
                <h4>Recomenda√ß√µes:</h4>
                <ul>
                  {activity.recommendations.map((rec, idx) => (
                    <li key={idx}>{rec}</li>
                  ))}
                </ul>
              </div>
            )}

            {activity.notes && (
              <div className={styles.notesList}>
                <h4>Observa√ß√µes:</h4>
                <ul>
                  {activity.notes.map((note, idx) => (
                    <li key={idx}>{note}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        ))}

        {recovery.generalTips && (
          <div className={styles.generalTips}>
            <h4>Dicas Gerais:</h4>
            <ul>
              {recovery.generalTips.map((tip, idx) => (
                <li key={idx}>{tip}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className={styles.pageContainer}>
      <motion.div className={styles.headerGlass}>
        <button onClick={() => router.back()} className={styles.backButton}>
          <IoArrowBack size={24} />
        </button>
        <h1>Recomenda√ß√µes de Sa√∫de</h1>
      </motion.div>

      {getGlycemiaStatus(glycemiaData.lastMeasurement) !== 'normal' && (
        <motion.div className={styles.alertWrapper}>
          {renderEmergencyAlert()}
        </motion.div>
      )}

      <div className={styles.statusCards}>
        <motion.div 
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          className={styles.statusCard}
        >
          <div className={styles.statusIcon}>üéØ</div>
          <div className={styles.statusInfo}>
            <h3>Meta Glic√™mica</h3>
            <p>
              {glycemiaData.glycemiaGoals ? 
                `${glycemiaData.glycemiaGoals.targetMin}-${glycemiaData.glycemiaGoals.targetMax} mg/dL` : 
                'Carregando...'}
            </p>
          </div>
        </motion.div>

        <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className={styles.statusCard}
        >
          <div className={styles.statusIcon}>‚öñÔ∏è</div>
          <div className={styles.statusInfo}>
            <h3>IMC</h3>
            <p>
              {userData ? 
                `${(userData.weight / Math.pow(userData.height / 100, 2)).toFixed(1)}` : 
                'Carregando...'}
            </p>
          </div>
        </motion.div>

        <motion.div 
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          className={styles.statusCard}
        >
          <div className={styles.statusIcon}>üìä</div>
          <div className={styles.statusInfo}>
            <h3>√öltima Medi√ß√£o</h3>
            <p>
              {glycemiaData.lastMeasurement ? 
                `${glycemiaData.lastMeasurement} mg/dL` : 
                'Sem medi√ß√µes'}
            </p>
          </div>
        </motion.div>
      </div>

      <div className={styles.tabsContainer}>
        <button 
          className={`${styles.tab} ${activeTab === 'exercise' ? styles.activeTab : ''}`}
          onClick={() => setActiveTab('exercise')}
        >
          <span className={styles.tabIcon}>üèÉ‚Äç‚ôÇÔ∏è</span>
          Exerc√≠cios
        </button>
        <button 
          className={`${styles.tab} ${activeTab === 'nutrition' ? styles.activeTab : ''}`}
          onClick={() => setActiveTab('nutrition')}
        >
          <span className={styles.tabIcon}>ü•óÔ∏è</span>
          Alimenta√ß√£o
        </button>
      </div>

      <AnimatePresence mode="wait">
        <motion.div 
          key={activeTab}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2 }}
          className={styles.contentContainer}
        >
          {renderContent()}
        </motion.div>
      </AnimatePresence>
    </div>
  );
} 